{"cells":[{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2988,"status":"ok","timestamp":1691187877293,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"6mtHKphsGVRJ","outputId":"c0bab97c-9bef-49d3-c340-f78a4b5cefae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["drive.mount(\"/content/drive\", force_remount=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qHgTa6oup92d","executionInfo":{"status":"ok","timestamp":1691188011248,"user_tz":240,"elapsed":1666,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"c6c596f4-9f6d-4804-c62a-290cee9e9949"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17629,"status":"ok","timestamp":1691183530250,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"iYJzPFoQGQoj","outputId":"e549f887-c927-464f-91c6-dabbe1bc7c77"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting emoji\n","  Downloading emoji-2.7.0.tar.gz (361 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/361.8 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m71.7/361.8 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━\u001b[0m \u001b[32m307.2/361.8 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m361.8/361.8 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: emoji\n","  Building wheel for emoji (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for emoji: filename=emoji-2.7.0-py2.py3-none-any.whl size=356563 sha256=4895cc5b9a169c5b78ee94f0d1e27b8046a5fc7cbfbd9415913c6e8b9e36d743\n","  Stored in directory: /root/.cache/pip/wheels/41/11/48/5df0b9727d5669c9174a141134f10304d1d78a3b89a4676f3d\n","Successfully built emoji\n","Installing collected packages: emoji\n","Successfully installed emoji-2.7.0\n"]}],"source":["pip install emoji --upgrade"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9456,"status":"ok","timestamp":1691183548643,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"BPtrjX9yGW50","outputId":"fc88fc85-c0bb-42ef-a3e0-d4535c3a86c7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.6)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.3.1)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2022.10.31)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.65.0)\n"]}],"source":["!pip install nltk"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14668,"status":"ok","timestamp":1691183563307,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"qbZESrVGGYg7","outputId":"ed696bce-8e92-434f-dfbb-fb99bd03adda"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting contractions\n","  Downloading contractions-0.1.73-py2.py3-none-any.whl (8.7 kB)\n","Collecting textsearch>=0.0.21 (from contractions)\n","  Downloading textsearch-0.0.24-py2.py3-none-any.whl (7.6 kB)\n","Collecting anyascii (from textsearch>=0.0.21->contractions)\n","  Downloading anyascii-0.3.2-py3-none-any.whl (289 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m289.9/289.9 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pyahocorasick (from textsearch>=0.0.21->contractions)\n","  Downloading pyahocorasick-2.0.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (110 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m110.8/110.8 kB\u001b[0m \u001b[31m11.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pyahocorasick, anyascii, textsearch, contractions\n","Successfully installed anyascii-0.3.2 contractions-0.1.73 pyahocorasick-2.0.0 textsearch-0.0.24\n"]}],"source":["!pip install contractions"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6425,"status":"ok","timestamp":1691183569722,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"IXuI5rbGGZor","outputId":"7840eaff-5ac5-4be5-e31b-4893cdcd7c1c"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]}],"source":["import pandas as pd\n","import re\n","import emoji\n","\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem import WordNetLemmatizer\n","from nltk.sentiment.util import mark_negation\n","import nltk\n","nltk.download('averaged_perceptron_tagger')\n","nltk.download('stopwords')\n","nltk.download('punkt')\n","\n","import contractions"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":204,"status":"ok","timestamp":1691183572548,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"nZiKxYPmGa-j","outputId":"29d2f669-2696-4b5c-d46a-da1e3d7554b7"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":7}],"source":["nltk.download('wordnet')"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1894,"status":"ok","timestamp":1691183576051,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"2jBK6ciHGm1e","outputId":"d48afea7-068a-4d92-b796-2ba82e9a88fc"},"outputs":[{"output_type":"stream","name":"stdout","text":["     id      company sentiment  \\\n","0  2401  Borderlands  Positive   \n","1  2401  Borderlands  Positive   \n","2  2401  Borderlands  Positive   \n","3  2401  Borderlands  Positive   \n","4  2401  Borderlands  Positive   \n","\n","                                               tweet  \n","0  im getting on borderlands and i will murder yo...  \n","1  I am coming to the borders and I will kill you...  \n","2  im getting on borderlands and i will kill you ...  \n","3  im coming on borderlands and i will murder you...  \n","4  im getting on borderlands 2 and i will murder ...  \n","     id    company   sentiment  \\\n","0  3364   Facebook  Irrelevant   \n","1   352     Amazon     Neutral   \n","2  8312  Microsoft    Negative   \n","3  4371      CS-GO    Negative   \n","4  4433     Google     Neutral   \n","\n","                                               tweet  \n","0  I mentioned on Facebook that I was struggling ...  \n","1  BBC News - Amazon boss Jeff Bezos rejects clai...  \n","2  @Microsoft Why do I pay for WORD when it funct...  \n","3  CSGO matchmaking is so full of closet hacking,...  \n","4  Now the President is slapping Americans in the...  \n"]}],"source":["# Loading the data\n","train_path = \"/content/drive/MyDrive/Colab Notebooks/project/twitter_sentiment/twitter_training.csv\"\n","val_path = \"/content/drive/MyDrive/Colab Notebooks/project/twitter_sentiment/twitter_validation.csv\"\n","# Note: ideally data doesnt have column headers but we add them to easy manipulation\n","headers = [\"id\", \"company\", \"sentiment\", \"tweet\"]\n","df_train = pd.read_csv(train_path, names=headers)\n","df_val = pd.read_csv(val_path, names=headers)\n","\n","print(df_train.head())\n","print(df_val.head())"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":272,"status":"ok","timestamp":1691183578319,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"HX2bpl4AGzhP"},"outputs":[],"source":["abbreviations = {\n","    \"$\" : \" dollar \",\n","    \"€\" : \" euro \",\n","    \"4ao\" : \"for adults only\",\n","    \"a.m\" : \"before midday\",\n","    \"a3\" : \"anytime anywhere anyplace\",\n","    \"aamof\" : \"as a matter of fact\",\n","    \"acct\" : \"account\",\n","    \"adih\" : \"another day in hell\",\n","    \"afaic\" : \"as far as i am concerned\",\n","    \"afaict\" : \"as far as i can tell\",\n","    \"afaik\" : \"as far as i know\",\n","    \"afair\" : \"as far as i remember\",\n","    \"afk\" : \"away from keyboard\",\n","    \"app\" : \"application\",\n","    \"approx\" : \"approximately\",\n","    \"apps\" : \"applications\",\n","    \"asap\" : \"as soon as possible\",\n","    \"asl\" : \"age, sex, location\",\n","    \"atk\" : \"at the keyboard\",\n","    \"ave.\" : \"avenue\",\n","    \"aymm\" : \"are you my mother\",\n","    \"ayor\" : \"at your own risk\",\n","    \"b&b\" : \"bed and breakfast\",\n","    \"b+b\" : \"bed and breakfast\",\n","    \"b.c\" : \"before christ\",\n","    \"b2b\" : \"business to business\",\n","    \"b2c\" : \"business to customer\",\n","    \"b4\" : \"before\",\n","    \"b4n\" : \"bye for now\",\n","    \"b@u\" : \"back at you\",\n","    \"bae\" : \"before anyone else\",\n","    \"bak\" : \"back at keyboard\",\n","    \"bbbg\" : \"bye bye be good\",\n","    \"bbc\" : \"british broadcasting corporation\",\n","    \"bbias\" : \"be back in a second\",\n","    \"bbl\" : \"be back later\",\n","    \"bbs\" : \"be back soon\",\n","    \"be4\" : \"before\",\n","    \"bfn\" : \"bye for now\",\n","    \"blvd\" : \"boulevard\",\n","    \"bout\" : \"about\",\n","    \"brb\" : \"be right back\",\n","    \"bros\" : \"brothers\",\n","    \"brt\" : \"be right there\",\n","    \"bsaaw\" : \"big smile and a wink\",\n","    \"btw\" : \"by the way\",\n","    \"bwl\" : \"bursting with laughter\",\n","    \"c/o\" : \"care of\",\n","    \"cet\" : \"central european time\",\n","    \"cf\" : \"compare\",\n","    \"cia\" : \"central intelligence agency\",\n","    \"csl\" : \"can not stop laughing\",\n","    \"cu\" : \"see you\",\n","    \"cul8r\" : \"see you later\",\n","    \"cv\" : \"curriculum vitae\",\n","    \"cwot\" : \"complete waste of time\",\n","    \"cya\" : \"see you\",\n","    \"cyt\" : \"see you tomorrow\",\n","    \"dae\" : \"does anyone else\",\n","    \"dbmib\" : \"do not bother me i am busy\",\n","    \"diy\" : \"do it yourself\",\n","    \"dm\" : \"direct message\",\n","    \"dwh\" : \"during work hours\",\n","    \"e123\" : \"easy as one two three\",\n","    \"eet\" : \"eastern european time\",\n","    \"eg\" : \"example\",\n","    \"embm\" : \"early morning business meeting\",\n","    \"encl\" : \"enclosed\",\n","    \"encl.\" : \"enclosed\",\n","    \"etc\" : \"and so on\",\n","    \"faq\" : \"frequently asked questions\",\n","    \"fawc\" : \"for anyone who cares\",\n","    \"fb\" : \"facebook\",\n","    \"fc\" : \"fingers crossed\",\n","    \"fig\" : \"figure\",\n","    \"fimh\" : \"forever in my heart\",\n","    \"ft.\" : \"feet\",\n","    \"ft\" : \"featuring\",\n","    \"ftl\" : \"for the loss\",\n","    \"ftw\" : \"for the win\",\n","    \"fwiw\" : \"for what it is worth\",\n","    \"fyi\" : \"for your information\",\n","    \"g9\" : \"genius\",\n","    \"gahoy\" : \"get a hold of yourself\",\n","    \"gal\" : \"get a life\",\n","    \"gcse\" : \"general certificate of secondary education\",\n","    \"gfn\" : \"gone for now\",\n","    \"gg\" : \"good game\",\n","    \"gl\" : \"good luck\",\n","    \"glhf\" : \"good luck have fun\",\n","    \"gmt\" : \"greenwich mean time\",\n","    \"gmta\" : \"great minds think alike\",\n","    \"gn\" : \"good night\",\n","    \"g.o.a.t\" : \"greatest of all time\",\n","    \"goat\" : \"greatest of all time\",\n","    \"goi\" : \"get over it\",\n","    \"gps\" : \"global positioning system\",\n","    \"gr8\" : \"great\",\n","    \"gratz\" : \"congratulations\",\n","    \"gyal\" : \"girl\",\n","    \"h&c\" : \"hot and cold\",\n","    \"hp\" : \"horsepower\",\n","    \"hr\" : \"hour\",\n","    \"hrh\" : \"his royal highness\",\n","    \"ht\" : \"height\",\n","    \"ibrb\" : \"i will be right back\",\n","    \"ic\" : \"i see\",\n","    \"icq\" : \"i seek you\",\n","    \"icymi\" : \"in case you missed it\",\n","    \"idc\" : \"i do not care\",\n","    \"idgadf\" : \"i do not give a damn fuck\",\n","    \"idgaf\" : \"i do not give a fuck\",\n","    \"idk\" : \"i do not know\",\n","    \"ie\" : \"that is\",\n","    \"i.e\" : \"that is\",\n","    \"ifyp\" : \"i feel your pain\",\n","    \"IG\" : \"instagram\",\n","    \"iirc\" : \"if i remember correctly\",\n","    \"ilu\" : \"i love you\",\n","    \"ily\" : \"i love you\",\n","    \"imho\" : \"in my humble opinion\",\n","    \"imo\" : \"in my opinion\",\n","    \"imu\" : \"i miss you\",\n","    \"iow\" : \"in other words\",\n","    \"irl\" : \"in real life\",\n","    \"j4f\" : \"just for fun\",\n","    \"jic\" : \"just in case\",\n","    \"jk\" : \"just kidding\",\n","    \"jsyk\" : \"just so you know\",\n","    \"l8r\" : \"later\",\n","    \"lb\" : \"pound\",\n","    \"lbs\" : \"pounds\",\n","    \"ldr\" : \"long distance relationship\",\n","    \"lmao\" : \"laugh my ass off\",\n","    \"lmfao\" : \"laugh my fucking ass off\",\n","    \"lol\" : \"laughing out loud\",\n","    \"ltd\" : \"limited\",\n","    \"ltns\" : \"long time no see\",\n","    \"m8\" : \"mate\",\n","    \"mf\" : \"motherfucker\",\n","    \"mfs\" : \"motherfuckers\",\n","    \"mfw\" : \"my face when\",\n","    \"mofo\" : \"motherfucker\",\n","    \"mph\" : \"miles per hour\",\n","    \"mr\" : \"mister\",\n","    \"mrw\" : \"my reaction when\",\n","    \"ms\" : \"miss\",\n","    \"mte\" : \"my thoughts exactly\",\n","    \"nagi\" : \"not a good idea\",\n","    \"nbc\" : \"national broadcasting company\",\n","    \"nbd\" : \"not big deal\",\n","    \"nfs\" : \"not for sale\",\n","    \"ngl\" : \"not going to lie\",\n","    \"nhs\" : \"national health service\",\n","    \"nrn\" : \"no reply necessary\",\n","    \"nsfl\" : \"not safe for life\",\n","    \"nsfw\" : \"not safe for work\",\n","    \"nth\" : \"nice to have\",\n","    \"nvr\" : \"never\",\n","    \"nyc\" : \"new york city\",\n","    \"oc\" : \"original content\",\n","    \"og\" : \"original\",\n","    \"ohp\" : \"overhead projector\",\n","    \"oic\" : \"oh i see\",\n","    \"omdb\" : \"over my dead body\",\n","    \"omg\" : \"oh my god\",\n","    \"omw\" : \"on my way\",\n","    \"p.a\" : \"per annum\",\n","    \"p.m\" : \"after midday\",\n","    \"pm\" : \"prime minister\",\n","    \"poc\" : \"people of color\",\n","    \"pov\" : \"point of view\",\n","    \"pp\" : \"pages\",\n","    \"ppl\" : \"people\",\n","    \"prw\" : \"parents are watching\",\n","    \"ps\" : \"postscript\",\n","    \"pt\" : \"point\",\n","    \"ptb\" : \"please text back\",\n","    \"pto\" : \"please turn over\",\n","    \"qpsa\" : \"what happens\", #\"que pasa\",\n","    \"ratchet\" : \"rude\",\n","    \"rbtl\" : \"read between the lines\",\n","    \"rlrt\" : \"real life retweet\",\n","    \"rofl\" : \"rolling on the floor laughing\",\n","    \"roflol\" : \"rolling on the floor laughing out loud\",\n","    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n","    \"rt\" : \"retweet\",\n","    \"ruok\" : \"are you ok\",\n","    \"sfw\" : \"safe for work\",\n","    \"sk8\" : \"skate\",\n","    \"smh\" : \"shake my head\",\n","    \"sq\" : \"square\",\n","    \"srsly\" : \"seriously\",\n","    \"ssdd\" : \"same stuff different day\",\n","    \"tbh\" : \"to be honest\",\n","    \"tbs\" : \"tablespooful\",\n","    \"tbsp\" : \"tablespooful\",\n","    \"tfw\" : \"that feeling when\",\n","    \"thks\" : \"thank you\",\n","    \"tho\" : \"though\",\n","    \"thx\" : \"thank you\",\n","    \"tia\" : \"thanks in advance\",\n","    \"til\" : \"today i learned\",\n","    \"tl;dr\" : \"too long i did not read\",\n","    \"tldr\" : \"too long i did not read\",\n","    \"tmb\" : \"tweet me back\",\n","    \"tntl\" : \"trying not to laugh\",\n","    \"ttyl\" : \"talk to you later\",\n","    \"u\" : \"you\",\n","    \"u2\" : \"you too\",\n","    \"u4e\" : \"yours for ever\",\n","    \"utc\" : \"coordinated universal time\",\n","    \"w/\" : \"with\",\n","    \"w/o\" : \"without\",\n","    \"w8\" : \"wait\",\n","    \"wassup\" : \"what is up\",\n","    \"wb\" : \"welcome back\",\n","    \"wtf\" : \"what the fuck\",\n","    \"wtg\" : \"way to go\",\n","    \"wtpa\" : \"where the party at\",\n","    \"wuf\" : \"where are you from\",\n","    \"wuzup\" : \"what is up\",\n","    \"wywh\" : \"wish you were here\",\n","    \"yd\" : \"yard\",\n","    \"ygtr\" : \"you got that right\",\n","    \"ynk\" : \"you never know\",\n","    \"zzz\" : \"sleeping bored and tired\"\n","}"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":115,"status":"ok","timestamp":1691183581570,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"H9qMwKl5G1Is"},"outputs":[],"source":["# Step 1: Remove NaN values\n","def remove_nan_values(df, columns):\n","    for column in columns:\n","        df = df[df[column].notna()]  # Remove rows with NaN values\n","        df = df[df[column].astype(bool)]  # Remove rows with empty lists or lists with only white spaces\n","    return df\n","\n","# Step 2: Assign tweet labels\n","def one_hot_encode_sentiments(sentiment): #make neutral and irrelavent same number, and look over\n","    if sentiment == 'Positive':\n","        return 2\n","    elif sentiment == 'Negative':\n","        return 0\n","    elif sentiment == 'Neutral':\n","        return 1\n","    elif sentiment == 'Irrelevant':\n","        return 1\n","\n","def expand_slang(text):\n","    tokens = word_tokenize(text)\n","    tokens = [abbreviations.get(word.lower(), word) for word in tokens]\n","    text = ' '.join(tokens)\n","    return text\n","\n","\n","# Step 3: Clean tweets\n","def clean_tweets(tweet):\n","    # Remove @mentions\n","    tweet = re.sub(r'@\\w+', '', tweet)\n","\n","    # Remove URLs\n","    tweet = re.sub(r'http\\S+|www\\S+', '', tweet)\n","\n","    # Remove hashtags\n","    tweet = re.sub(r'#\\w+', '', tweet)\n","\n","    # Convert emojis to text\n","    tweet = emoji.demojize(tweet)\n","\n","    # Expand contractions\n","    tweet = contractions.fix(tweet)\n","    ##############################3\n","\n","    # Remove numbers\n","    tweet = re.sub(r'\\d+', '', tweet)\n","\n","    # Remove punctuation\n","    tweet = re.sub(r'[^\\w\\s]', '', tweet)\n","\n","    # Remove excessive whitespace\n","    tweet = re.sub(r'\\s+', ' ', tweet)\n","\n","    # Standardize repeated characters\n","    tweet = re.sub(r'(.)\\1+', r'\\1\\1', tweet)\n","\n","    #Expand slang terms\n","    tweet = expand_slang(tweet)\n","\n","    # Tokenize the tweet\n","    tokens = word_tokenize(tweet)\n","\n","    # Lowercase and normalize\n","    tokens = [token.lower() for token in tokens]\n","\n","    # Remove stop words\n","    stop_words = set(stopwords.words('english'))\n","    tokens = [token for token in tokens if token.lower() not in stop_words]\n","\n","    # Lemmatization good neg\n","    lemmatizer = WordNetLemmatizer()\n","    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n","\n","    # Handle negation using mark_negation\n","    #tokens = mark_negation(tokens)\n","    #tweet = \"I don't like this product. It is not good.\"\n","    #['I', \"don't\", 'like_NEG', 'this_NEG', 'product_NEG', '.', 'It_NEG', 'is_NEG', 'not_NEG', 'good_NEG', '.']\n","\n","    # Uncomment the following lines to include POS tags as comments\n","    #pos_tags = nltk.pos_tag(tokens)\n","    #tokens_with_pos = [f\"{token}/{pos}\" for token, pos in pos_tags]\n","\n","    return tokens"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":159,"status":"ok","timestamp":1691183584979,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"A3xbRrvFCxvs","outputId":"69b19fa3-2ce7-453e-da25-d676c46d01b7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training Data Sentiment Counts:\n","Positive (2): 18318\n","Neutral (1): 20832\n","Negative (0): 22542\n","\n","Validation Data Sentiment Counts:\n","Positive (2): 266\n","Neutral (1): 277\n","Negative (0): 285\n"]}],"source":["# Print the counts of positive, neutral, and negative sentiments\n","train_counts = df_train['sentiment'].value_counts()\n","val_counts = df_val['sentiment'].value_counts()\n","\n","print(\"Training Data Sentiment Counts:\")\n","print(f\"Positive (2): {train_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {train_counts.get(1, 0)}\")\n","print(f\"Negative (0): {train_counts.get(0, 0)}\")\n","\n","print(\"\\nValidation Data Sentiment Counts:\")\n","print(f\"Positive (2): {val_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {val_counts.get(1, 0)}\")\n","print(f\"Negative (0): {val_counts.get(0, 0)}\")\n","\n","# Rest of the code"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":324,"status":"ok","timestamp":1691183602138,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"o4XLR8RRG7PD","outputId":"e8ae921e-ec2a-445d-cf4d-0b2df2665228"},"outputs":[{"output_type":"stream","name":"stdout","text":["     id      company sentiment  \\\n","0  2401  Borderlands  Positive   \n","1  2401  Borderlands  Positive   \n","2  2401  Borderlands  Positive   \n","3  2401  Borderlands  Positive   \n","4  2401  Borderlands  Positive   \n","\n","                                               tweet  \n","0  im getting on borderlands and i will murder yo...  \n","1  I am coming to the borders and I will kill you...  \n","2  im getting on borderlands and i will kill you ...  \n","3  im coming on borderlands and i will murder you...  \n","4  im getting on borderlands 2 and i will murder ...  \n","     id    company   sentiment  \\\n","0  3364   Facebook  Irrelevant   \n","1   352     Amazon     Neutral   \n","2  8312  Microsoft    Negative   \n","3  4371      CS-GO    Negative   \n","4  4433     Google     Neutral   \n","\n","                                               tweet  \n","0  I mentioned on Facebook that I was struggling ...  \n","1  BBC News - Amazon boss Jeff Bezos rejects clai...  \n","2  @Microsoft Why do I pay for WORD when it funct...  \n","3  CSGO matchmaking is so full of closet hacking,...  \n","4  Now the President is slapping Americans in the...  \n"]}],"source":["# Step 1: Remove NaN values\n","columns_to_check = [\"sentiment\", \"tweet\"]\n","df_train = remove_nan_values(df_train, columns_to_check)\n","df_val = remove_nan_values(df_val, columns_to_check)\n","\n","print(df_train.head())\n","print(df_val.head())"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":93,"status":"ok","timestamp":1691183607327,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"obq9v6IMG8i9","outputId":"e5f134ee-7cac-4293-a3f4-f8fb64f158c9"},"outputs":[{"output_type":"stream","name":"stdout","text":["     id      company  sentiment  \\\n","0  2401  Borderlands          2   \n","1  2401  Borderlands          2   \n","2  2401  Borderlands          2   \n","3  2401  Borderlands          2   \n","4  2401  Borderlands          2   \n","\n","                                               tweet  \n","0  im getting on borderlands and i will murder yo...  \n","1  I am coming to the borders and I will kill you...  \n","2  im getting on borderlands and i will kill you ...  \n","3  im coming on borderlands and i will murder you...  \n","4  im getting on borderlands 2 and i will murder ...  \n","     id    company  sentiment  \\\n","0  3364   Facebook          1   \n","1   352     Amazon          1   \n","2  8312  Microsoft          0   \n","3  4371      CS-GO          0   \n","4  4433     Google          1   \n","\n","                                               tweet  \n","0  I mentioned on Facebook that I was struggling ...  \n","1  BBC News - Amazon boss Jeff Bezos rejects clai...  \n","2  @Microsoft Why do I pay for WORD when it funct...  \n","3  CSGO matchmaking is so full of closet hacking,...  \n","4  Now the President is slapping Americans in the...  \n"]}],"source":["df_train['sentiment'] = df_train['sentiment'].apply(one_hot_encode_sentiments)\n","df_val['sentiment'] = df_val['sentiment'].apply(one_hot_encode_sentiments)\n","\n","print(df_train.head())\n","print(df_val.head())"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":147,"status":"ok","timestamp":1691183611343,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"WEEYHSI3C6ha","outputId":"988b0e88-f0cf-4707-e7cb-332e6a98fde3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training Data Sentiment Counts:\n","Positive (2): 20655\n","Neutral (1): 30983\n","Negative (0): 22358\n","\n","Validation Data Sentiment Counts:\n","Positive (2): 277\n","Neutral (1): 457\n","Negative (0): 266\n"]}],"source":["# Print the counts of positive, neutral, and negative sentiments\n","train_counts = df_train['sentiment'].value_counts()\n","val_counts = df_val['sentiment'].value_counts()\n","\n","print(\"Training Data Sentiment Counts:\")\n","print(f\"Positive (2): {train_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {train_counts.get(1, 0)}\")\n","print(f\"Negative (0): {train_counts.get(0, 0)}\")\n","\n","print(\"\\nValidation Data Sentiment Counts:\")\n","print(f\"Positive (2): {val_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {val_counts.get(1, 0)}\")\n","print(f\"Negative (0): {val_counts.get(0, 0)}\")\n","\n","# Rest of the code"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":79810,"status":"ok","timestamp":1691183696070,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"W_5aw4nVG91C","outputId":"a9ea3687-8ac9-4327-f6f3-4d6d2f976f6b"},"outputs":[{"output_type":"stream","name":"stdout","text":["     id      company  sentiment                          tweet\n","0  2401  Borderlands          2  [getting, borderland, murder]\n","1  2401  Borderlands          2         [coming, border, kill]\n","2  2401  Borderlands          2    [getting, borderland, kill]\n","3  2401  Borderlands          2   [coming, borderland, murder]\n","4  2401  Borderlands          2  [getting, borderland, murder]\n","     id    company  sentiment  \\\n","0  3364   Facebook          1   \n","1   352     Amazon          1   \n","2  8312  Microsoft          0   \n","3  4371      CS-GO          0   \n","4  4433     Google          1   \n","\n","                                               tweet  \n","0  [mentioned, facebook, struggling, motivation, ...  \n","1  [british, broadcasting, corporation, news, ama...  \n","2  [pay, word, function, poorly, chromebook, face...  \n","3  [csgo, matchmaking, full, closet, hacking, tru...  \n","4  [president, slapping, american, face, really, ...  \n"]}],"source":["# Step 3: Clean tweets\n","df_train['tweet'] = df_train['tweet'].apply(clean_tweets)\n","df_val['tweet'] = df_val['tweet'].apply(clean_tweets)\n","\n","print(df_train.head())\n","print(df_val.head())"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1691183712843,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"9Q1QjG14DSs7","outputId":"be8c1e09-0b18-4d81-e7e5-ae1fab49de46"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training Data Sentiment Counts:\n","Positive (2): 20655\n","Neutral (1): 30983\n","Negative (0): 22358\n","\n","Validation Data Sentiment Counts:\n","Positive (2): 277\n","Neutral (1): 457\n","Negative (0): 266\n"]}],"source":["# Print the counts of positive, neutral, and negative sentiments\n","train_counts = df_train['sentiment'].value_counts()\n","val_counts = df_val['sentiment'].value_counts()\n","\n","print(\"Training Data Sentiment Counts:\")\n","print(f\"Positive (2): {train_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {train_counts.get(1, 0)}\")\n","print(f\"Negative (0): {train_counts.get(0, 0)}\")\n","\n","print(\"\\nValidation Data Sentiment Counts:\")\n","print(f\"Positive (2): {val_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {val_counts.get(1, 0)}\")\n","print(f\"Negative (0): {val_counts.get(0, 0)}\")\n","\n","# Rest of the code"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":103,"status":"ok","timestamp":1691183714675,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"zD3zM14xHAlZ","outputId":"ae27ee99-07b7-4543-81a7-33e8ee2894c7"},"outputs":[{"output_type":"stream","name":"stdout","text":["     id      company  sentiment                          tweet\n","0  2401  Borderlands          2  [getting, borderland, murder]\n","1  2401  Borderlands          2         [coming, border, kill]\n","2  2401  Borderlands          2    [getting, borderland, kill]\n","3  2401  Borderlands          2   [coming, borderland, murder]\n","4  2401  Borderlands          2  [getting, borderland, murder]\n","     id    company  sentiment  \\\n","0  3364   Facebook          1   \n","1   352     Amazon          1   \n","2  8312  Microsoft          0   \n","3  4371      CS-GO          0   \n","4  4433     Google          1   \n","\n","                                               tweet  \n","0  [mentioned, facebook, struggling, motivation, ...  \n","1  [british, broadcasting, corporation, news, ama...  \n","2  [pay, word, function, poorly, chromebook, face...  \n","3  [csgo, matchmaking, full, closet, hacking, tru...  \n","4  [president, slapping, american, face, really, ...  \n"]}],"source":["# Print the resulting DataFrame\n","print(df_train.head())\n","print(df_val.head())"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":6963,"status":"ok","timestamp":1691183724063,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"OqMQesJiHCzv"},"outputs":[],"source":["# Assuming your DataFrame is named df\n","import torch\n","# Drop the 'id' column\n","df_train_new = df_train\n","df_val_new = df_val\n","\n","# Export the DataFrame to a CSV file\n","df_train_new.to_csv('df_train_new_int.csv', index=False)\n","df_val_new.to_csv('df_val_new_int.csv', index=False)"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":102,"status":"ok","timestamp":1691183736377,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"NojZ5_e5HEhs","outputId":"dbdae172-45f4-42fb-d120-3ee303ab97d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["     id      company  sentiment                          tweet\n","0  2401  Borderlands          2  [getting, borderland, murder]\n","1  2401  Borderlands          2         [coming, border, kill]\n","2  2401  Borderlands          2    [getting, borderland, kill]\n","3  2401  Borderlands          2   [coming, borderland, murder]\n","4  2401  Borderlands          2  [getting, borderland, murder]\n"]}],"source":["print(df_train_new[:5])"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":149,"status":"ok","timestamp":1691183743077,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"ThMFklLIySkp"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","from sklearn.model_selection import train_test_split\n","from nltk.tokenize import word_tokenize\n","from collections import Counter\n","import pandas as pd\n","import re\n","import emoji\n","import contractions\n","import nltk\n","from nltk.corpus import stopwords\n","from nltk.stem import WordNetLemmatizer"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":414,"status":"ok","timestamp":1691183745114,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"4MuaieNNyVXK"},"outputs":[],"source":["# Load your preprocessed data\n","series_of_lists_train = df_train_new['tweet']\n","series_of_lists_valid = df_val_new['tweet']\n","\n","# Create a vocabulary and a word-to-index dictionary\n","all_words = [word for tweet in series_of_lists_train for word in tweet]\n","word_counts = Counter(all_words)\n","vocab = sorted(word_counts, key=word_counts.get, reverse=True)\n","word_to_index = {word: idx for idx, word in enumerate(vocab)}\n","\n","# Define the maximum sequence length\n","MAX_SEQUENCE_LENGTH = 198"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":196,"status":"ok","timestamp":1691183747949,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"JzVWTXZNyeb6"},"outputs":[],"source":["class CustomDataset(Dataset):\n","    def __init__(self, data, labels, word_to_index):\n","        self.data = data\n","        self.labels = labels\n","        self.word_to_index = word_to_index\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        tokens = self.data.iloc[idx]\n","        indices = [self.word_to_index[word] for word in tokens if word in self.word_to_index]\n","        padded_indices = indices + [0] * (MAX_SEQUENCE_LENGTH - len(indices))\n","        return torch.tensor(padded_indices), torch.tensor(self.labels.iloc[idx])\n","\n","# Create Custom Datasets and DataLoaders\n","train_dataset = CustomDataset(series_of_lists_train, df_train['sentiment'], word_to_index)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","val_dataset = CustomDataset(series_of_lists_valid, df_val['sentiment'], word_to_index)\n","val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)"]},{"cell_type":"code","execution_count":23,"metadata":{"executionInfo":{"elapsed":85,"status":"ok","timestamp":1691183752580,"user":{"displayName":"james li","userId":"12481766252124362236"},"user_tz":240},"id":"jbTEs5FMvMsm"},"outputs":[],"source":["# Define your CNN architecture\n","class CNNModel(nn.Module):\n","    def __init__(self, vocab_size, embedding_dim, num_classes, dropout_percent=0.5):\n","        super(CNNModel, self).__init__()\n","        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n","        self.conv1 = nn.Conv1d(embedding_dim, 128, kernel_size=3)\n","        self.conv2 = nn.Conv1d(128, 64, kernel_size=3)\n","        self.pool = nn.MaxPool1d(3)  # Change the pooling size\n","        self.fc1 = nn.Linear(64 * 21, 128)  # Adjust the linear layer input and output sizes\n","        self.fc2 = nn.Linear(128, num_classes)\n","        self.dropout = nn.Dropout(dropout_percent)\n","\n","    def forward(self, x):\n","        x = self.embedding(x)\n","        x = x.permute(0, 2, 1)\n","        x = F.relu(self.conv1(x))\n","        x = self.pool(x)\n","        x = F.relu(self.conv2(x))\n","        x = self.pool(x)\n","        x = x.view(x.size(0), -1)\n","        x = F.relu(self.fc1(x))\n","        x = self.dropout(x)\n","        x = self.fc2(x)\n","        return x\n","\n","def train(model, train_dataloader, learning_rate, num_epochs, optimizer):\n","  # Training loop\n","  criterion = nn.CrossEntropyLoss()\n","\n","  for epoch in range(num_epochs):\n","      model.train()\n","      for inputs, labels in train_loader:\n","          optimizer.zero_grad()\n","          outputs = model(inputs)\n","          loss = criterion(outputs, labels)\n","          loss.backward()\n","          optimizer.step()\n","\n","      model.eval()\n","      val_loss = 0.0\n","      correct = 0\n","      total = 0\n","      with torch.no_grad():\n","          for inputs, labels in val_loader:\n","              outputs = model(inputs)\n","              val_loss += criterion(outputs, labels).item()\n","              _, predicted = torch.max(outputs, 1)\n","              total += labels.size(0)\n","              correct += (predicted == labels).sum().item()\n","\n","              # Print labels and predictions for debugging\n","              #print(\"Labels:\", labels)\n","              #print(\"Predictions:\", predicted)\n","\n","      print(f\"Epoch [{epoch+1}/{num_epochs}] - \"\n","            f\"Validation Loss: {val_loss / len(val_loader):.4f} - \"\n","            f\"Validation Accuracy: {(correct / total) * 100:.2f}%\")\n","  return (correct / total) * 100"]},{"cell_type":"code","source":["#HyperTuned1\n","vocab_size = len(vocab)\n","embedding_dim = 100\n","num_classes = 3\n","learning_rate = 0.001\n","num_epochs = 10\n","dropout_percent = 0\n","kernel_num = 3\n","\n","hyper1 = CNNModel(vocab_size, embedding_dim, num_classes, dropout_percent)\n","optimizer = optim.Adam(hyper1.parameters(), lr=learning_rate)\n","\n","# Define loss function and optimizer\n","#criterion = nn.CrossEntropyLoss()\n","\n","train(hyper1, train_loader, learning_rate, num_epochs, optimizer)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"07umFy8TDwUr","executionInfo":{"status":"ok","timestamp":1691187039382,"user_tz":240,"elapsed":3242091,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"97c98acd-7741-45a7-ffd7-1dabda1a0c86"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/10] - Validation Loss: 0.4735 - Validation Accuracy: 82.60%\n","Epoch [2/10] - Validation Loss: 0.2268 - Validation Accuracy: 92.80%\n","Epoch [3/10] - Validation Loss: 0.1851 - Validation Accuracy: 94.70%\n","Epoch [4/10] - Validation Loss: 0.1354 - Validation Accuracy: 96.30%\n","Epoch [5/10] - Validation Loss: 0.1233 - Validation Accuracy: 97.00%\n","Epoch [6/10] - Validation Loss: 0.1140 - Validation Accuracy: 96.70%\n","Epoch [7/10] - Validation Loss: 0.1374 - Validation Accuracy: 96.80%\n","Epoch [8/10] - Validation Loss: 0.1170 - Validation Accuracy: 97.10%\n","Epoch [9/10] - Validation Loss: 0.1341 - Validation Accuracy: 96.90%\n","Epoch [10/10] - Validation Loss: 0.1350 - Validation Accuracy: 97.10%\n"]},{"output_type":"execute_result","data":{"text/plain":["97.1"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#HyperTuned2\n","vocab_size = len(vocab)\n","embedding_dim = 100\n","num_classes = 3\n","learning_rate = 0.001\n","num_epochs = 10\n","dropout_percent = 0.2\n","kernel_num = 3\n","\n","hyper2 = CNNModel(vocab_size, embedding_dim, num_classes, dropout_percent)\n","optimizer = optim.Adam(hyper2.parameters(), lr=learning_rate)\n","\n","# Define loss function and optimizer\n","#criterion = nn.CrossEntropyLoss()\n","\n","train(hyper2, train_loader, learning_rate, num_epochs, optimizer)"],"metadata":{"id":"Wepl18wAHc5O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#HyperTuned3\n","vocab_size = len(vocab)\n","embedding_dim = 100\n","num_classes = 3\n","learning_rate = 0.001\n","num_epochs = 10\n","dropout_percent = 0.35\n","kernel_num = 3\n","\n","hyper3 = CNNModel(vocab_size, embedding_dim, num_classes, dropout_percent)\n","optimizer = optim.Adam(hyper3.parameters(), lr=learning_rate)\n","\n","# Define loss function and optimizer\n","#criterion = nn.CrossEntropyLoss()\n","\n","train(hyper3, train_loader, learning_rate, num_epochs, optimizer)"],"metadata":{"id":"K4_Y2EQvHedt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Initialize the model coinceditally like Hyper 4 with droupur = 0.5\n","vocab_size = len(vocab)\n","embedding_dim = 100\n","num_classes = 3\n","learning_rate = 0.001\n","num_epochs = 10\n","dropout_percent = 0.5\n","kernel_num = 3\n","\n","model = CNNModel(vocab_size, embedding_dim, num_classes, dropout_percent)\n","optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n","\n","# Define loss function and optimizer\n","#criterion = nn.CrossEntropyLoss()\n","\n","train(model, train_loader, learning_rate, num_epochs, optimizer)"],"metadata":{"id":"PvLIhLJrKpg_"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"YSeaKAfN8rMc","executionInfo":{"status":"ok","timestamp":1691181222629,"user_tz":240,"elapsed":1932,"user":{"displayName":"Pierre Ishak","userId":"08507075842828312856"}},"outputId":"6cf6b84f-3797-4a95-d12a-970db296ed1c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","\n","# Evaluate the model\n","def evaluate_model(model, data_loader):\n","    model.eval()\n","    all_labels = []\n","    all_predictions = []\n","    with torch.no_grad():\n","        for inputs, labels in data_loader:\n","            outputs = model(inputs)\n","            _, predicted = torch.max(outputs, 1)\n","            all_labels.extend(labels.tolist())\n","            all_predictions.extend(predicted.tolist())\n","    return all_labels, all_predictions\n","\n","# Evaluate the model on the validation set\n","val_labels, val_predictions = evaluate_model(hyper1, val_loader)\n","\n","# Compute the confusion matrix\n","cm = confusion_matrix(val_labels, val_predictions, labels=[0, 1, 2])\n","\n","# Plot the confusion matrix\n","classes = ['Negative', 'Neutral', 'Positive']\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","disp.plot(cmap=plt.cm.Blues, values_format='.0f')\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WGZsAhqo3dvm","executionInfo":{"status":"ok","timestamp":1691181349822,"user_tz":240,"elapsed":2845,"user":{"displayName":"Pierre Ishak","userId":"08507075842828312856"}},"outputId":"aa03a7a7-af3c-48e1-ccb8-d2fde741ed83"},"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","([1, 1, 0, 0, 1, 0, 2, 2, 2, 0, 2, 2, 0, 1, 0, 2, 2, 0, 2, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 0, 2, 2, 2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 1, 0, 1, 1, 0, 2, 0, 0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 1, 2, 1, 0, 2, 2, 1, 2, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 1, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 0, 0, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 1, 1, 1, 0, 0, 1, 1, 0, 2, 2, 0, 1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 2, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 2, 2, 1, 1, 1, 2, 0, 0, 2, 2, 2, 2, 1, 1, 2, 0, 1, 2, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0, 0, 0, 2, 0, 1, 2, 1, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 0, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 2, 1, 1, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1, 0, 1, 0, 2, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 2, 1, 0, 1, 1, 0, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 0, 0, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 0, 1, 2, 0, 1, 2, 2, 0, 1, 1, 2, 1, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 2, 1, 0, 2, 0, 0, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 0, 1, 0, 1, 2, 1, 1, 1, 0, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2, 0, 2, 0, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0, 1, 1, 0, 2, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 0, 2, 2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0, 0, 2, 0, 0, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1, 1, 2, 1, 0, 1, 1, 0, 1, 2, 2, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 1, 1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 1, 1, 0, 2, 2, 0, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 0, 1, 0, 1, 1, 1, 2, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 2, 1, 0, 0, 2, 1, 1, 2, 1, 2, 1, 1, 0, 1, 1, 1, 2, 2, 1, 2, 2, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 0, 2, 2, 0, 2, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 0, 0, 2, 2, 2, 1, 2, 1, 1, 0, 2, 2, 0, 0, 0, 1, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n"]}],"source":["confusion_matrix = evaluate_model(model, val_loader)\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YZOcUBiq-Xfz","executionInfo":{"status":"ok","timestamp":1691181352935,"user_tz":240,"elapsed":119,"user":{"displayName":"Pierre Ishak","userId":"08507075842828312856"}},"outputId":"b197f6bb-b8b8-4211-ef60-7f89efdd6d93"},"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted Label: 0\n","Negative Probability: 0.9999932050704956\n","Neutral Probability: 5.658051577484002e-06\n","Positive Probability: 1.2173146615168662e-06\n"]}],"source":["# Run the Model on New Data\n","def predict_sentiment(model, text, word_to_index):\n","    tokens = word_tokenize(text)\n","    indices = [word_to_index[word] for word in tokens if word in word_to_index]\n","    padded_indices = indices + [0] * (MAX_SEQUENCE_LENGTH - len(indices))\n","    inputs = torch.tensor(padded_indices).unsqueeze(0)\n","    outputs = model(inputs)\n","    _, predicted = torch.max(outputs, 1)\n","    predicted_label = predicted.item()\n","\n","    # Get the probability scores for each class\n","    softmax_scores = torch.nn.functional.softmax(outputs, dim=1)\n","    negative_prob = softmax_scores[0][0].item()  # Probability of negative class\n","    neutral_prob = softmax_scores[0][1].item()   # Probability of neutral class\n","    positive_prob = softmax_scores[0][2].item()  # Probability of positive class\n","\n","    return predicted_label, negative_prob, neutral_prob, positive_prob\n","\n","new_text = \"poorly, chromebook, facebook\"\n","predicted_label, negative_prob, neutral_prob, positive_prob = predict_sentiment(hyper1, new_text, word_to_index)\n","\n","print(f\"Predicted Label: {predicted_label}\")\n","print(f\"Negative Probability: {negative_prob}\")\n","print(f\"Neutral Probability: {neutral_prob}\")\n","print(f\"Positive Probability: {positive_prob}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JybAmAFvJJBc","outputId":"995352d6-01b9-473b-d54f-1e0ce8b71323"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: hyperopt in /usr/local/lib/python3.10/dist-packages (0.2.7)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from hyperopt) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from hyperopt) (1.11.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from hyperopt) (1.16.0)\n","Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.10/dist-packages (from hyperopt) (3.1)\n","Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from hyperopt) (0.18.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from hyperopt) (4.65.0)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from hyperopt) (2.2.1)\n","Requirement already satisfied: py4j in /usr/local/lib/python3.10/dist-packages (from hyperopt) (0.10.9.7)\n"]}],"source":["pip install hyperopt"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":547},"id":"kSFBjGW4B0pC","executionInfo":{"status":"error","timestamp":1691176707006,"user_tz":240,"elapsed":166176,"user":{"displayName":"Pierre Ishak","userId":"08507075842828312856"}},"outputId":"6ea3e5a9-2819-4eb5-848d-7411bf705d9e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/2] - Validation Loss: 1.0805 - Validation Accuracy: 45.70%\n","Epoch [2/2] - Validation Loss: 1.0750 - Validation Accuracy: 45.70%\n","Epoch [1/2] - Validation Loss: 1.0575 - Validation Accuracy: 47.90%\n","Epoch [2/2] - Validation Loss: 1.0045 - Validation Accuracy: 50.60%\n","Epoch [1/2] - Validation Loss: 1.0690 - Validation Accuracy: 45.70%\n","Epoch [2/2] - Validation Loss: 1.0693 - Validation Accuracy: 45.70%\n","Epoch [1/2] - Validation Loss: 0.6907 - Validation Accuracy: 71.70%\n","Epoch [2/2] - Validation Loss: 0.4193 - Validation Accuracy: 83.60%\n","  3%|▎         | 4/130 [27:00<14:10:41, 405.09s/trial, best loss: -83.6]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-7d089c40a8b7>\u001b[0m in \u001b[0;36m<cell line: 50>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;31m# Run the hyperparameter search using the Tree of Parzen Estimators (TPE) algorithm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m \u001b[0mbest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobjective\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mspace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mspace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malgo\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtpe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msuggest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_evals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m130\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrials\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;31m# Sort the top_configs list based on accuracy in descending order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/fmin.py\u001b[0m in \u001b[0;36mfmin\u001b[0;34m(fn, space, algo, max_evals, timeout, loss_threshold, trials, rstate, allow_trials_fmin, pass_expr_memo_ctrl, catch_eval_exceptions, verbose, return_argmin, points_to_evaluate, max_queue_len, show_progressbar, early_stop_fn, trials_save_file)\u001b[0m\n\u001b[1;32m    538\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mallow_trials_fmin\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrials\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"fmin\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         return trials.fmin(\n\u001b[0m\u001b[1;32m    541\u001b[0m             \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m             \u001b[0mspace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/base.py\u001b[0m in \u001b[0;36mfmin\u001b[0;34m(self, fn, space, algo, max_evals, timeout, loss_threshold, max_queue_len, rstate, verbose, pass_expr_memo_ctrl, catch_eval_exceptions, return_argmin, show_progressbar, early_stop_fn, trials_save_file)\u001b[0m\n\u001b[1;32m    669\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mfmin\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfmin\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    670\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 671\u001b[0;31m         return fmin(\n\u001b[0m\u001b[1;32m    672\u001b[0m             \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    673\u001b[0m             \u001b[0mspace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/fmin.py\u001b[0m in \u001b[0;36mfmin\u001b[0;34m(fn, space, algo, max_evals, timeout, loss_threshold, trials, rstate, allow_trials_fmin, pass_expr_memo_ctrl, catch_eval_exceptions, verbose, return_argmin, points_to_evaluate, max_queue_len, show_progressbar, early_stop_fn, trials_save_file)\u001b[0m\n\u001b[1;32m    584\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m     \u001b[0;31m# next line is where the fmin is actually executed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0mrval\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexhaust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreturn_argmin\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/fmin.py\u001b[0m in \u001b[0;36mexhaust\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    362\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mexhaust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    363\u001b[0m         \u001b[0mn_done\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 364\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_evals\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mn_done\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblock_until_done\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masynchronous\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    365\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrials\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrefresh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/fmin.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, N, block_until_done)\u001b[0m\n\u001b[1;32m    298\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    299\u001b[0m                     \u001b[0;31m# -- loop over trials and do the jobs directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 300\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mserial_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    301\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    302\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrials\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrefresh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/fmin.py\u001b[0m in \u001b[0;36mserial_evaluate\u001b[0;34m(self, N)\u001b[0m\n\u001b[1;32m    176\u001b[0m                 \u001b[0mctrl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCtrl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrials\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcurrent_trial\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m                     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdomain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctrl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    179\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m                     \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"job exception: %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/hyperopt/base.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, config, ctrl, attach_attachments)\u001b[0m\n\u001b[1;32m    890\u001b[0m                 \u001b[0mprint_node_on_error\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrec_eval_print_node_on_error\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m             )\n\u001b[0;32m--> 892\u001b[0;31m             \u001b[0mrval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpyll_rval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    893\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumber\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-24-7d089c40a8b7>\u001b[0m in \u001b[0;36mobjective\u001b[0;34m(params)\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0;31m# Train the model and get the accuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m     \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;31m# Add the hyperparameters and accuracy to the top_configs list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-23-b588ec8dbb5a>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(model, train_dataloader, learning_rate, num_epochs, optimizer)\u001b[0m\n\u001b[1;32m     32\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m           \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m           \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m           \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m           \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-23-b588ec8dbb5a>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpermute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    311\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conv_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36m_conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    307\u001b[0m                             \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbias\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m                             _single(0), self.dilation, self.groups)\n\u001b[0;32m--> 309\u001b[0;31m         return F.conv1d(input, weight, bias, self.stride,\n\u001b[0m\u001b[1;32m    310\u001b[0m                         self.padding, self.dilation, self.groups)\n\u001b[1;32m    311\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["from hyperopt import hp, fmin, tpe, Trials\n","\n","# Define the hyperparameter search space\n","space = {\n","    'lr': hp.choice('lr', [1e-5, 1e-4, 1e-3, 1e-2, 5e-5, 5e-4]),\n","    'dropout': hp.choice('dropout', [0.0, 0.2, 0.35, 0.5, 0.75, 0.8, 1]),  # Dropout rate\n","    'optimizer': hp.choice('optimizer', ['adam', 'sgd', 'rmsprop']),  # Optimizer choice\n","    'epochs': 2  # Run each model for 1 epoch\n","}\n","\n","# Initialize a list to store the top 10 hyperparameter configurations and their accuracies\n","top_configs = []\n","\n","# Define the objective function to optimize (in this case, the negative accuracy)\n","def objective(params):\n","    vocab_size = len(vocab)\n","    embedding_dim = 100\n","    num_classes = 3\n","\n","    lr = params['lr']\n","    dropout = params['dropout']\n","    optimizer_choice = params['optimizer']\n","    epochs = params['epochs']\n","\n","    # Create the model with the given hyperparameters\n","    model = CNNModel(vocab_size, embedding_dim, num_classes, dropout)\n","\n","    # Choose optimizer\n","    optimizer = None\n","    if optimizer_choice == 'adam':\n","        optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n","    elif optimizer_choice == 'sgd':\n","        optimizer = torch.optim.SGD(model.parameters(), lr=lr)\n","    elif optimizer_choice == 'rmsprop':\n","        optimizer = torch.optim.RMSprop(model.parameters(), lr=lr)\n","\n","    # Train the model and get the accuracy\n","    accuracy = train(model, train_loader, lr, epochs, optimizer)\n","\n","    # Add the hyperparameters and accuracy to the top_configs list\n","    top_configs.append({'lr': lr, 'dropout': dropout, 'optimizer': optimizer_choice, 'accuracy': accuracy})\n","\n","    # Since hyperopt minimizes the objective function, we need to return the negative accuracy\n","    return -accuracy\n","\n","# Initialize the Trials object to track the optimization process\n","trials = Trials()\n","\n","# Run the hyperparameter search using the Tree of Parzen Estimators (TPE) algorithm\n","best = fmin(fn=objective, space=space, algo=tpe.suggest, max_evals=130, trials=trials)\n","\n","# Sort the top_configs list based on accuracy in descending order\n","top_configs.sort(key=lambda x: x['accuracy'], reverse=True)\n","\n","# Print the 10 best hyperparameter configurations and their accuracies\n","for i, config in enumerate(top_configs[:10]):\n","    print(f\"Top {i+1} Hyperparameters:\")\n","    print(f\"Learning Rate: {config['lr']}\")\n","    print(f\"Dropout Rate: {config['dropout']}\")\n","    print(f\"Optimizer: {config['optimizer']}\")\n","    print(f\"Accuracy: {config['accuracy']}\\n\")"]},{"cell_type":"code","source":["# Step 1: Remove NaN values\n","def remove_nan_values(df, columns):\n","    for column in columns:\n","        df = df[df[column].notna()]  # Remove rows with NaN values\n","        df = df[df[column].astype(bool)]  # Remove rows with empty lists or lists with only white spaces\n","    return df\n","\n","# Step 2: Assign tweet labels\n","def one_hot_encode_sentiments(sentiment): #make neutral and irrelavent same number, and look over\n","    if sentiment == 'positive':\n","        return 2\n","    elif sentiment == 'negative':\n","        return 0\n","    elif sentiment == 'neutral':\n","        return 1\n","    elif sentiment == 'irrelevant':\n","        return 1\n","\n","def expand_slang(text):\n","    tokens = word_tokenize(text)\n","    tokens = [abbreviations.get(word.lower(), word) for word in tokens]\n","    text = ' '.join(tokens)\n","    return text\n","\n","\n","# Step 3: Clean tweets\n","def clean_tweets(tweet):\n","    # Remove @mentions\n","    tweet = re.sub(r'@\\w+', '', tweet)\n","\n","    # Remove URLs\n","    tweet = re.sub(r'http\\S+|www\\S+', '', tweet)\n","\n","    # Remove hashtags\n","    tweet = re.sub(r'#\\w+', '', tweet)\n","\n","    # Convert emojis to text\n","    tweet = emoji.demojize(tweet)\n","\n","    # Expand contractions\n","    tweet = contractions.fix(tweet)\n","    ##############################3\n","\n","    # Remove numbers\n","    tweet = re.sub(r'\\d+', '', tweet)\n","\n","    # Remove punctuation\n","    tweet = re.sub(r'[^\\w\\s]', '', tweet)\n","\n","    # Remove excessive whitespace\n","    tweet = re.sub(r'\\s+', ' ', tweet)\n","\n","    # Standardize repeated characters\n","    tweet = re.sub(r'(.)\\1+', r'\\1\\1', tweet)\n","\n","    #Expand slang terms\n","    tweet = expand_slang(tweet)\n","\n","    # Tokenize the tweet\n","    tokens = word_tokenize(tweet)\n","\n","    # Lowercase and normalize\n","    tokens = [token.lower() for token in tokens]\n","\n","    # Remove stop words\n","    stop_words = set(stopwords.words('english'))\n","    tokens = [token for token in tokens if token.lower() not in stop_words]\n","\n","    # Lemmatization good neg\n","    lemmatizer = WordNetLemmatizer()\n","    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n","\n","    # Handle negation using mark_negation\n","    #tokens = mark_negation(tokens)\n","    #tweet = \"I don't like this product. It is not good.\"\n","    #['I', \"don't\", 'like_NEG', 'this_NEG', 'product_NEG', '.', 'It_NEG', 'is_NEG', 'not_NEG', 'good_NEG', '.']\n","\n","    # Uncomment the following lines to include POS tags as comments\n","    #pos_tags = nltk.pos_tag(tokens)\n","    #tokens_with_pos = [f\"{token}/{pos}\" for token, pos in pos_tags]\n","\n","    return tokens"],"metadata":{"id":"xKckQo1pBUV_","executionInfo":{"status":"ok","timestamp":1691187665144,"user_tz":240,"elapsed":96,"user":{"displayName":"james li","userId":"12481766252124362236"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["unseen_path = \"/content/drive/MyDrive/Colab Notebooks/project/twitter_sentiment/sentiment-emotion-labelled_Dell_tweets.csv\"\n","df_unseen = pd.read_csv(unseen_path)\n","print(df_unseen.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zCoBJl6R-_A7","executionInfo":{"status":"ok","timestamp":1691188022433,"user_tz":240,"elapsed":584,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"ef4dd33b-86d1-4cc5-8d9a-1c60469f64da"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0                   Datetime             Tweet Id  \\\n","0           0  2022-09-30 23:29:15+00:00  1575991191170342912   \n","1           1  2022-09-30 21:46:35+00:00  1575965354425131008   \n","2           2  2022-09-30 21:18:02+00:00  1575958171423752203   \n","3           3  2022-09-30 20:05:24+00:00  1575939891485032450   \n","4           4  2022-09-30 20:03:17+00:00  1575939359160750080   \n","\n","                                                Text        Username  \\\n","0  @Logitech @apple @Google @Microsoft @Dell @Len...  ManjuSreedaran   \n","1  @MK_habit_addict @official_stier @MortalKombat...      MiKeMcDnet   \n","2  As @CRN celebrates its 40th anniversary, Bob F...        jfollett   \n","3  @dell your customer service is horrible especi...       daveccarr   \n","4  @zacokalo @Dell @DellCares @Dell give the man ...      heycamella   \n","\n","  sentiment  sentiment_score       emotion  emotion_score  \n","0   neutral         0.853283  anticipation       0.587121  \n","1   neutral         0.519470           joy       0.886913  \n","2  positive         0.763791           joy       0.960347  \n","3  negative         0.954023         anger       0.983203  \n","4   neutral         0.529170         anger       0.776124  \n"]}]},{"cell_type":"code","source":["# Step 1: Remove NaN values\n","columns_to_check = [\"Datetime\",\t\"Tweet Id\",\t\"Text\",\t\"Username\", \"sentiment\",\"sentiment_score\",\"emotion\", \"emotion_score\"]\n","df_unseen = remove_nan_values(df_unseen, columns_to_check)\n","\n","print(df_unseen.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rRm28tw9_4Tj","executionInfo":{"status":"ok","timestamp":1691188023917,"user_tz":240,"elapsed":242,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"131810a8-6c06-45ff-fdc4-60879dba18f5"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0                   Datetime             Tweet Id  \\\n","0           0  2022-09-30 23:29:15+00:00  1575991191170342912   \n","1           1  2022-09-30 21:46:35+00:00  1575965354425131008   \n","2           2  2022-09-30 21:18:02+00:00  1575958171423752203   \n","3           3  2022-09-30 20:05:24+00:00  1575939891485032450   \n","4           4  2022-09-30 20:03:17+00:00  1575939359160750080   \n","\n","                                                Text        Username  \\\n","0  @Logitech @apple @Google @Microsoft @Dell @Len...  ManjuSreedaran   \n","1  @MK_habit_addict @official_stier @MortalKombat...      MiKeMcDnet   \n","2  As @CRN celebrates its 40th anniversary, Bob F...        jfollett   \n","3  @dell your customer service is horrible especi...       daveccarr   \n","4  @zacokalo @Dell @DellCares @Dell give the man ...      heycamella   \n","\n","  sentiment  sentiment_score       emotion  emotion_score  \n","0   neutral         0.853283  anticipation       0.587121  \n","1   neutral         0.519470           joy       0.886913  \n","2  positive         0.763791           joy       0.960347  \n","3  negative         0.954023         anger       0.983203  \n","4   neutral         0.529170         anger       0.776124  \n"]}]},{"cell_type":"code","source":["df_unseen['sentiment'] = df_unseen['sentiment'].apply(one_hot_encode_sentiments)\n","\n","print(df_unseen.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pwpq1i3GA7WD","executionInfo":{"status":"ok","timestamp":1691188025389,"user_tz":240,"elapsed":120,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"e271bc75-0add-44b8-d0ed-4d4172d1e1a8"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0                   Datetime             Tweet Id  \\\n","0           0  2022-09-30 23:29:15+00:00  1575991191170342912   \n","1           1  2022-09-30 21:46:35+00:00  1575965354425131008   \n","2           2  2022-09-30 21:18:02+00:00  1575958171423752203   \n","3           3  2022-09-30 20:05:24+00:00  1575939891485032450   \n","4           4  2022-09-30 20:03:17+00:00  1575939359160750080   \n","\n","                                                Text        Username  \\\n","0  @Logitech @apple @Google @Microsoft @Dell @Len...  ManjuSreedaran   \n","1  @MK_habit_addict @official_stier @MortalKombat...      MiKeMcDnet   \n","2  As @CRN celebrates its 40th anniversary, Bob F...        jfollett   \n","3  @dell your customer service is horrible especi...       daveccarr   \n","4  @zacokalo @Dell @DellCares @Dell give the man ...      heycamella   \n","\n","   sentiment  sentiment_score       emotion  emotion_score  \n","0          1         0.853283  anticipation       0.587121  \n","1          1         0.519470           joy       0.886913  \n","2          2         0.763791           joy       0.960347  \n","3          0         0.954023         anger       0.983203  \n","4          1         0.529170         anger       0.776124  \n"]}]},{"cell_type":"code","source":["# Print the counts of positive, neutral, and negative sentiments\n","unseen_counts = df_unseen['sentiment'].value_counts()\n","\n","print(\"Training Data Sentiment Counts:\")\n","print(f\"Positive (2): {unseen_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {unseen_counts.get(1, 0)}\")\n","print(f\"Negative (0): {unseen_counts.get(0, 0)}\")\n","\n","# Rest of the code"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9hpMOSIHBhqL","executionInfo":{"status":"ok","timestamp":1691188026750,"user_tz":240,"elapsed":93,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"4568ac70-c3f5-4ff3-8f4c-9a4b442ecedf"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Data Sentiment Counts:\n","Positive (2): 7366\n","Neutral (1): 7048\n","Negative (0): 10556\n"]}]},{"cell_type":"code","source":["# Step 3: Clean tweets\n","df_unseen['Text'] = df_unseen['Text'].apply(clean_tweets)\n","\n","print(df_unseen.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CT7oqnJLBwmb","executionInfo":{"status":"ok","timestamp":1691188053277,"user_tz":240,"elapsed":25519,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"f5254be2-2eb3-4199-a99b-dfc1aa609263"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0                   Datetime             Tweet Id  \\\n","0           0  2022-09-30 23:29:15+00:00  1575991191170342912   \n","1           1  2022-09-30 21:46:35+00:00  1575965354425131008   \n","2           2  2022-09-30 21:18:02+00:00  1575958171423752203   \n","3           3  2022-09-30 20:05:24+00:00  1575939891485032450   \n","4           4  2022-09-30 20:03:17+00:00  1575939359160750080   \n","\n","                                                Text        Username  \\\n","0  [qwerty, modified, programmer, thing, like, br...  ManjuSreedaran   \n","1  [getting, new, one, one, year, old, triple, pr...      MiKeMcDnet   \n","2  [celebrates, th, anniversary, bob, faletra, sp...        jfollett   \n","3  [customer, service, horrible, especially, agen...       daveccarr   \n","4                                  [give, man, paid]      heycamella   \n","\n","   sentiment  sentiment_score       emotion  emotion_score  \n","0          1         0.853283  anticipation       0.587121  \n","1          1         0.519470           joy       0.886913  \n","2          2         0.763791           joy       0.960347  \n","3          0         0.954023         anger       0.983203  \n","4          1         0.529170         anger       0.776124  \n"]}]},{"cell_type":"code","source":["# Print the counts of positive, neutral, and negative sentiments\n","unseen_counts = df_unseen['sentiment'].value_counts()\n","\n","print(\"Training Data Sentiment Counts:\")\n","print(f\"Positive (2): {unseen_counts.get(2, 0)}\")\n","print(f\"Neutral (1): {unseen_counts.get(1, 0)}\")\n","print(f\"Negative (0): {unseen_counts.get(0, 0)}\")\n","\n","# Rest of the code"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n2mzIxYwB4DN","executionInfo":{"status":"ok","timestamp":1691188062864,"user_tz":240,"elapsed":81,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"f35bcf28-1e8f-416d-a167-df93863f7eb6"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Data Sentiment Counts:\n","Positive (2): 7366\n","Neutral (1): 7048\n","Negative (0): 10556\n"]}]},{"cell_type":"code","source":["print(df_unseen.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QAPBoVsbB4gr","executionInfo":{"status":"ok","timestamp":1691188064118,"user_tz":240,"elapsed":97,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"d96db12d-a80a-4812-a4af-aab19e1aea8f"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["   Unnamed: 0                   Datetime             Tweet Id  \\\n","0           0  2022-09-30 23:29:15+00:00  1575991191170342912   \n","1           1  2022-09-30 21:46:35+00:00  1575965354425131008   \n","2           2  2022-09-30 21:18:02+00:00  1575958171423752203   \n","3           3  2022-09-30 20:05:24+00:00  1575939891485032450   \n","4           4  2022-09-30 20:03:17+00:00  1575939359160750080   \n","\n","                                                Text        Username  \\\n","0  [qwerty, modified, programmer, thing, like, br...  ManjuSreedaran   \n","1  [getting, new, one, one, year, old, triple, pr...      MiKeMcDnet   \n","2  [celebrates, th, anniversary, bob, faletra, sp...        jfollett   \n","3  [customer, service, horrible, especially, agen...       daveccarr   \n","4                                  [give, man, paid]      heycamella   \n","\n","   sentiment  sentiment_score       emotion  emotion_score  \n","0          1         0.853283  anticipation       0.587121  \n","1          1         0.519470           joy       0.886913  \n","2          2         0.763791           joy       0.960347  \n","3          0         0.954023         anger       0.983203  \n","4          1         0.529170         anger       0.776124  \n"]}]},{"cell_type":"code","source":["import torch\n","from nltk.tokenize import word_tokenize\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","\n","MAX_SEQUENCE_LENGTH = 198 # Adjust this value based on your model's input size\n","\n","def calculate_accuracy(predicted_labels, true_labels):\n","  total = len(predicted_labels)\n","  correct = sum(1 for pred, true in zip(predicted_labels, true_labels) if pred == true)\n","  accuracy = correct / total\n","  return accuracy\n","\n","def predict_and_evaluate_sentiment(model, dataset, text_column, sentiment_column, word_to_index):\n","  predicted_labels = []\n","  true_labels = []\n","\n","  for text, true_sentiment in zip(dataset[text_column], dataset[sentiment_column]):\n","  # Tokenize individual words from the list\n","    tokens = []\n","    for word in text:\n","      try:\n","        word_tokens = word_tokenize(word)\n","        tokens.extend(word_tokens)\n","      except Exception as e:\n","        print(f\"Error during tokenization: {e}\")\n","        continue\n","    indices = [word_to_index[word] for word in text if word in word_to_index]\n","    padded_indices = indices + [0] * (MAX_SEQUENCE_LENGTH - len(indices))\n","    inputs = torch.tensor(padded_indices).unsqueeze(0)\n","    outputs = model(inputs)\n","    _, predicted = torch.max(outputs, 1)\n","    predicted_label = predicted.item()\n","\n","    predicted_labels.append(predicted_label)\n","    true_labels.append(true_sentiment)\n","\n","# Calculate confusion matrix for each sentiment class\n","  confusion = confusion_matrix(true_labels, predicted_labels, labels=[0, 1, 2])\n","\n","# Calculate accuracy for each sentiment class\n","  accuracy_negative = confusion[0][0] / (confusion[0][0] +\n","  confusion[0][1] + confusion[0][2])\n","  accuracy_neutral = confusion[1][1] / (confusion[1][0] +\n","  confusion[1][1] + confusion[1][2])\n","  accuracy_positive = confusion[2][2] / (confusion[2][0] +\n","  confusion[2][1] + confusion[2][2])\n","\n","\n","# Calculate total number of samples\n","  total = len(true_labels)\n","\n","# Calculate overall accuracy\n","  overall_accuracy = (confusion[0][0] + confusion[1][1] + confusion[2][2]) / total\n","\n","  return (\n","  predicted_labels,\n","  true_labels,\n","  confusion,\n","  accuracy_negative,\n","  accuracy_neutral,\n","  accuracy_positive,\n","  overall_accuracy\n","  )\n"],"metadata":{"id":"WtvTYg2tVi1D","executionInfo":{"status":"ok","timestamp":1691188515600,"user_tz":240,"elapsed":92,"user":{"displayName":"james li","userId":"12481766252124362236"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# Assuming df_unseen is your DataFrame containing unseen data\n","predicted_labels, true_labels, confusion, accuracy_negative, accuracy_neutral, accuracy_positive, overall_accuracy = predict_and_evaluate_sentiment(hyper1, df_unseen, 'Text', 'sentiment', word_to_index)\n","\n","# Display confusion matrix as an image\n","disp = ConfusionMatrixDisplay(confusion_matrix=confusion, display_labels=['Negative', 'Neutral', 'Positive'])\n","disp.plot(cmap=plt.cm.Blues)\n","\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","plt.show()\n","\n","print(\"Confusion Matrix:\")\n","print(confusion)\n","print()\n","\n","print(f\"Accuracy - Negative: {accuracy_negative:.2%}\")\n","print(f\"Accuracy - Neutral: {accuracy_neutral:.2%}\")\n","print(f\"Accuracy - Positive: {accuracy_positive:.2%}\")\n","print(f\"Overall Accuracy: {overall_accuracy:.2%}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":636},"id":"g7KD1k6mVlWI","executionInfo":{"status":"ok","timestamp":1691188592187,"user_tz":240,"elapsed":74938,"user":{"displayName":"james li","userId":"12481766252124362236"}},"outputId":"2a956045-1679-4d38-8891-4f0d6914d5c0"},"execution_count":45,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[5411 4126 1019]\n"," [1968 3742 1338]\n"," [1115 3997 2254]]\n","\n","Accuracy - Negative: 51.26%\n","Accuracy - Neutral: 53.09%\n","Accuracy - Positive: 30.60%\n","Overall Accuracy: 45.68%\n"]}]}],"metadata":{"accelerator":"TPU","colab":{"provenance":[{"file_id":"1G4XJpCTsOt9olIGDIEA0YCc1Cy2N2jT7","timestamp":1691120327124}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}